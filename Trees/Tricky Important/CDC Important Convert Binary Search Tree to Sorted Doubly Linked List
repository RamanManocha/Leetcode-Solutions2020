
https://www.youtube.com/watch?v=WVFk9DwRgpY&ab_channel=CodeLibrary

26. Convert Binary Search Tree to Sorted Doubly Linked List
Medium

922

92

Add to List

Share
Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.

You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, 
the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right 
pointer should point to its successor. You should return the pointer to the smallest element of the linked list.






/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;

    Node() {}

    Node(int _val) {
        val = _val;
        left = NULL;
        right = NULL;
    }

    Node(int _val, Node* _left, Node* _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/





Code : https://www.youtube.com/watch?v=WVFk9DwRgpY&ab_channel=CodeLibrary

class Solution {
public:
    Node* start;
    Node* prev;
    
	/*
	Here we do inorder traversal of the nodes in the BST and while doing the traversal we keep track of the prev node and then link the prev node and curr node and move the prev node to the curr node
	*/
	
    void traverse(Node* root){
        if(!root) return;
        
        traverse(root->left);
        Node* curr = new Node(root->val);
        if(!start){
            start = curr;
            prev = curr;
        }else{
            prev->right = curr;
            curr->left = prev;
            prev = prev->right;
        }
        
        traverse(root->right);
    }
    
    Node* treeToDoublyList(Node* root) {
        if (!root) return NULL;
        
        traverse(root);
        
        start->left = prev;
        prev->right = start;
        return start;
    }
};



















 
 class Solution {
public:
    void inorder(Node* n, Node*& prev, Node*& head) {
        // First node without left children is head
        if (!head && !n->left) {
            head = n;
            prev = n;
        }
        Node * left = n->left;
        Node * right = n->right;
        // process left
        if (left) inorder(left, prev, head);
        // current
        prev->right = n;
        n->left = prev;
        // right
        prev = n;
        if(right) inorder(right, prev, head);
    }
    Node* treeToDoublyList(Node* root) {
        if (!root) return NULL;
        Node* prev = NULL;
        Node* head = NULL;
        inorder(root, prev, head);
        prev->right = head;
        head->left = prev;
        return head;
    }
};

class Solution {
private:
    Node *head;
    stack<Node*> s;
    
    void populateStack(Node *node) {
        while(node) {
            s.push(node);
            node = node->left;
        }
    }
    
public:
    Node* treeToDoublyList(Node* root) {
        Node *node, *head;
        
        if (!root)
            return NULL;
        
        populateStack(root);
        head = s.top();
        while(!s.empty()) {
            node = s.top();
            s.pop();
            
            populateStack(node->right);
            
            if (!s.empty()) {
                node->right = s.top();
                s.top()->left = node;
            }
        }
        node->right = head;
        head->left = node;
        return head;
    }
};
