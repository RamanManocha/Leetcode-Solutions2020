651. 4 Keys Keyboard
Medium

373

57

Add to List

Share
Imagine you have a special keyboard with the following keys:

Key 1: (A): Print one 'A' on screen.

Key 2: (Ctrl-A): Select the whole screen.

Key 3: (Ctrl-C): Copy selection to buffer.

Key 4: (Ctrl-V): Print buffer on screen appending it after what has already been printed.

Now, you can only press the keyboard for N times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.

Example 1:
Input: N = 3
Output: 3
Explanation: 
We can at most get 3 A's on screen by pressing following key sequence:
A, A, A




We can solve this problem using DP with optimization in O(N) time, based on two observations. Here I assume n >= 6.

For dp[n], we can copy dp[n-3] and paste 1 time, or copy dp[n-4] and paste 2 times, and so on.
So dp[n] = max(dp[n-i]x(i-1), for i >= 3 && i <= n-1); This will result in an O(N^2) solution.
However, when i >= 7, i-3 is the same or more optimal than i. The reason is that we can select, copy and paste 1 time, then select, copy and keep pasting, dp[n] = dp[n-i]x2x(i-4). 2(i-4) >= i-1 when i >= 7.
So only i = 3, 4, 5, 6 are considered.
class Solution {
public:
    int maxA(int N) {
        if (N < 6) return N;
        vector<int> dp(N+1, 0);
        for (int i = 1; i <= 6; i++)
            dp[i] = i;
        for (int i = 7; i <= N; i++) {
            for (int j = 3; j <= 6; j++) 
                dp[i] = max(dp[i], dp[i-j]*(j-1));
        }
        return dp[N];
    }
};

