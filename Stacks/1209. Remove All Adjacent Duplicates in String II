
1209. Remove All Adjacent Duplicates in String II
Medium



Share
Given a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.
We repeatedly make k duplicate removals on s until we no longer can.
Return the final string after all such duplicate removals have been made.
It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.


int main() {
   
    string s;
    int k;
    int n;
    cin >> n >> k;
    cin >> s;
    
    stack<pair<char, int>> stk;
    
     for (int i = 0; i < s.length(); i++) {
            if (!stk.empty() && stk.top().first == s[i]) {
                if (stk.top().second == k - 1) stk.pop();
                else stk.top().second++;
            } else {
                stk.push(make_pair(s[i], 1));
            }
        }
        string res = "";
        while(!stk.empty()){
            int count = stk.top().second;
            while (count > 0) {
                res = stk.top().first + res;
                count--;
            }
            
         stk.pop();
        }
           
    
        cout << res << endl;
        
    
    
    
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}
