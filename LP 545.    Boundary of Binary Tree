545. Boundary of Binary Tree
Medium

522

896

Add to List

Share
Given a binary tree, return the values of its boundary in anti-clockwise direction starting from root. Boundary includes left boundary, leaves, and right boundary in order without duplicate nodes.  (The values of the nodes may still be duplicates.)

Left boundary is defined as the path from root to the left-most node. Right boundary is defined as the path from root to the right-most node. If the root doesn't have left subtree or right subtree, then the root itself is left boundary or right boundary. Note this definition only applies to the input binary tree, and not applies to any subtrees.

The left-most node is defined as a leaf node you could reach when you always firstly travel to the left subtree if exists. If not, travel to the right subtree. Repeat until you reach a leaf node.

The right-most node is also defined by the same way with left and right exchanged.

Example 1

Input:
  1
   \
    2
   / \
  3   4

Ouput:
[1, 3, 4, 2]

Explanation:
The root doesn't have left subtree, so the root itself is left boundary.
The leaves are node 3 and 4.
The right boundary are node 1,2,4. Note the anti-clockwise direction means you should output reversed right boundary.
So order them in anti-clockwise without duplicates and we have [1,3,4,2].
 

Example 2

Input:
    ____1_____
   /          \
  2            3
 / \          / 
4   5        6   
   / \      / \
  7   8    9  10  
       
Ouput:
[1,2,4,7,8,9,10,6,3]

Explanation:
The left boundary are node 1,2,4. (4 is the left-most node according to definition)
The leaves are node 4,7,8,9,10.
The right boundary are node 1,3,6,10. (10 is the right-most node).
So order them in anti-clockwise without duplicate nodes we have [1,2,4,7,8,9,10,6,3].




- left boundary, left leaves, right leaves, right boundary

I just checked a node is left most or right most.

If it is the left most or the leaf node, add to result using the preorder.
If it is the right most and not the leaf node, add to result using the postorder.





node.left is left bound if node is left bound;
node.right could also be left bound if node is left bound && node has no right child;
Same applys for right bound;
if node is left bound, add it before 2 child - pre order;
if node is right bound, add it after 2 child - post order;
A leaf node that is neither left or right bound belongs to the bottom line;
C++



class Solution {
    vector<int>res;
    void printLeaves(TreeNode* root) {
        if (!root) return;
        
        if (!root->left && !root->right)
            res.push_back(root->val);
        printLeaves(root->left);
        printLeaves(root->right);
    }
    
    void printLeftBoundary(TreeNode* root) {
        if (!root) return;
        if (!root->left && !root->right) return;
    
        res.push_back(root->val);
        
        if (root->left)
            printLeftBoundary(root->left);
        else if (root->right)
            printLeftBoundary(root->right);
    }
    
    void printRightBoundary(TreeNode* root) {
        if (!root) return;
        if (!root->left && !root->right) return;
        
        if (root->right)
            printRightBoundary(root->right);
        else if (root->left)
            printRightBoundary(root->left);
        
        res.push_back(root->val);
    }
    
public:
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        if (!root) return res;
        
        res.push_back(root->val);
        printLeftBoundary(root->left);
        printLeaves(root->left);
        printLeaves(root->right);
        printRightBoundary(root->right);
        return res;
    }
};








class Solution {
public:
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        vector<int> bounds;
        if (root) {
            bounds.push_back(root->val);
            getBounds(root->left, bounds, true, false);
            getBounds(root->right, bounds, false, true);
        }
        return bounds;
    }

private:
    void getBounds(TreeNode* node, vector<int>& res, bool lb, bool rb) {
        if (!node)  return;
        if (lb) res.push_back(node->val);
        if (!lb && !rb && !node->left && !node->right)  res.push_back(node->val);
        getBounds(node->left, res, lb, rb && !node->right);
        getBounds(node->right, res, lb && !node->left, rb);
        if (rb) res.push_back(node->val);
    }
};





Approach 3 :



typedef vector<TreeNode*> nodes;
#define all(v) (v).begin(),(v).end()

class Solution {
public:
  // boundary nodes & leaves
  vector<int> left_boundaries = {};
  vector<int> right_boundaries = {};
  vector<int> left_leaves = {};
  vector<int> right_leaves = {};
  
  vector<int> lefts = {};
  vector<int> rights = {};
  
  vector<int> boundaryOfBinaryTree(TreeNode* root) {
    if (!root) return {};
    
    lefts.push_back(root->val);
    l_traverse(root->left, true);
    r_traverse(root->right, true);
    
    reverse(all(rights));
    // lefts + reverse(rights) for anti-clockwise direction
    copy(all(rights), back_inserter(lefts));
    return lefts;
  }
  
  void l_traverse(TreeNode* node, bool is_boundary) {
    if (!node) return;
    
    if (is_boundary) {
      lefts.push_back(node->val);
      if (node->left) {
        l_traverse(node->left, true);
        l_traverse(node->right, false);
      } else {
        l_traverse(node->right, true);
      }
    } else {
      if (isLeef(node)) lefts.push_back(node->val);
      l_traverse(node->left, false);
      l_traverse(node->right, false);
    }
  }
  
  void r_traverse(TreeNode* node, bool is_boundary) {
    if (!node) return;
    
    cout << node->val << endl;
    if (is_boundary) {
      rights.push_back(node->val);
      if (node->right) {
        r_traverse(node->right, true);
        r_traverse(node->left, false);
      } else {
        r_traverse(node->left, true);
      }
    } else {
      if (isLeef(node)) rights.push_back(node->val);
      r_traverse(node->right, false);
      r_traverse(node->left, false);
    }
  }
  
  bool isLeef(TreeNode* node) {
    return (!node->left && !node->right);
  }
};
