


https://www.youtube.com/watch?v=47ZP-0iBicI&ab_channel=KeertiPurswani



Virtual functions ensure that the correct function is called for an object, regardless of the type of reference (or pointer) used for function call.


They are mainly used to achieve Runtime polymorphism


Virtual functions cannot be static.
A virtual function can be a friend function of another class


Virtual functions should be accessed using pointer or reference of base class type to achieve run time polymorphism.



A class may have virtual destructor but it cannot have a virtual constructor.


// CPP program to illustrate
// concept of Virtual Functions
 
#include <iostream>
using namespace std;
 
class base {
public:
    virtual void print()
    {
        cout << "print base class" << endl;
    }
 
    void show()
    {
        cout << "show base class" << endl;
    }
};
 
class derived : public base {
public:
    void print()
    {
        cout << "print derived class" << endl;
    }
 
    void show()
    {
        cout << "show derived class" << endl;
    }
};
 
int main()
{
    base* bptr;
    derived d;
    bptr = &d;
 
    // virtual function, binded at runtime
    bptr->print();
 
    // Non-virtual function, binded at compile time
    bptr->show();
}


Explanation: Runtime polymorphism is achieved only through a pointer (or reference) of base class type. Also, a base class pointer can point to the objects of base 
class as well as to the objects of derived class. In above code, base class pointer ‘bptr’ contains the address of object ‘d’ of derived class.
Late binding(Runtime) is done in accordance with the content of pointer (i.e. location pointed to by pointer) and Early binding(Compile time) is done according to the
type of pointer, since print() function is declared with virtual keyword so it will be bound at run-time (output is print derived class as pointer is pointing to object
of derived class ) and show() is non-virtual so it will be bound during compile time(output is show base class as pointer is of base type ).
NOTE: If we have created a virtual function in the base class and it is being overridden in the derived class then we don’t need virtual keyword in the derived class, 
functions are automatically considered as virtual functions in the derived class.
 

Working of virtual functions(concept of VTABLE and VPTR)
As discussed here, If a class contains a virtual function then compiler itself does two things: 
 

If object of that class is created then a virtual pointer(VPTR) is inserted as a data member of the class to point to VTABLE of that class. For each new object created,
a new virtual pointer is inserted as a data member of that class.
Irrespective of object is created or not, a static array of function pointer called VTABLE where each cell contains the address of each virtual function contained in 
that class.







