1165. Single-Row Keyboard
Easy

139

12

Add to List

Share
There is a special keyboard with all keys in a single row.

Given a string keyboard of length 26 indicating the layout of the keyboard (indexed from 0 to 25), initially your finger is at index 0. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index i to index j is |i - j|.

You want to type a string word. Write a function to calculate how much time it takes to type it with one finger.

 

Example 1:

Input: keyboard = "abcdefghijklmnopqrstuvwxyz", word = "cba"
Output: 4
Explanation: The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.
Total time = 2 + 1 + 1 = 4. 
Example 2:

Input: keyboard = "pqrstuvwxyzabcdefghijklmno", word = "leetcode"
Output: 73


class Solution {
public:
    int calculateTime(string keyboard, string word) {
        unordered_map<char, int> mp;
        for (int i = 0; i < keyboard.size(); i++) {
            mp[keyboard[i]] = i;
        }
        int time = mp[word[0]]; // This also takes care of word only having length of only one character.
        for (int j = 0; j < word.size() - 1; j++) {
            int last  = mp[word[j]];
            int next = mp[word[j+1]];
            time += abs(last-next);
        }
        return time;
    }
};


*
(1) go through the keyboard and save the corresponding pos of each letter --- O(26), S(26)  ---> O(1), S(1)
(2) use an auxiliary variable, prev, to keep track of previous pos. 
Start with previous postion (initialized as 0), calulate the distance between 
the pos of current char and previous pos, add to the result, 
and set current pos as previous pos, and so on. --- O(N), length of the word

class Solution {
public:
    int calculateTime(string keyboard, string word) {
        map<char,int> hash;

        for (int i = 0; i < size(keyboard); i++) {
            hash[keyboard[i]]=i;
        }

        int distance = 0;
        int pos = 0;
        for (int i = 0; i < word.length(); i++) {
            distance += abs(pos - hash[word[i]]);
            pos = hash[word[i]];
        }
        return distance;
    }
};
