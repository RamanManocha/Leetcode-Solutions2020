


887. Super Egg Drop
Hard

1391

97

Add to List

Share
You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.

You know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.

Each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of f is.

 

Example 1:

Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.
Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.
If it does not break, then we know f = 2.
Hence, we need at minimum 2 moves to determine with certainty what the value of f is.
Example 2:

Input: k = 2, n = 6
Output: 3
Example 3:

Input: k = 3, n = 14
Output: 4
 

Constraints:

1 <= k <= 100
1 <= n <= 104






// class Solution {
// public:
//     int superEggDrop(int k, int n) {
        
//     }
// };


class Solution {
public:
    int superEggDrop(int K, int N) {
        // opt[moves][eggs] := using m moves and e eggs, how many floors can we check?
        int opt[N+1][K+1];
        memset(opt, 0, sizeof(opt));
        for (int m = 1; m <= N; ++m) {
            for (int e = 1; e <= K; ++e) {
                opt[m][e] = opt[m-1][e-1] + opt[m-1][e] + 1;
                // have we checked all the floors?
                if (opt[m][e] >= N) {
                    return m;
                }
            }
        }
        return -1; // we'll never get here
    }
};

class Solution {
public:
    int superEggDrop(int K, int N) {
       vector<vector<int>>dp(K+1,vector<int>(N+1,-1));
       return solve(K,N,dp);
    }
    
    //Optimized Recursion(by using memoization/caching) with Linear search
    int solve(int eggs,int floors,vector<vector<int>> &dp)
    {
        if(dp[eggs][floors]!=-1)
            return dp[eggs][floors];
        else if(eggs==0 || floors==0)
            return dp[eggs][floors]=0;
        else if(floors==1)
            return dp[eggs][floors]=1;
        else if(eggs==1)
            return dp[eggs][floors]=floors;
        else
        {
          int minn=INT_MAX;
          for(int f=1;f<=floors;f++)              //Linear search
          {
              int x=max(solve(eggs,floors-f,dp),solve(eggs-1,f-1,dp));
              minn=min(minn,x+1);
          }
          dp[eggs][floors]=minn;
        }  
        return dp[eggs][floors];
    } 
};
