class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        if (points.size() < 3)
            return points.size();
        
        int res = 0;
        
        for (int i = 0; i < points.size(); ++i) {
            map<pair<int, int>, int> record;
            int same_count = 0, vertical_count = 0, tmp_res = 0;
            for (int j = i + 1; j < points.size(); ++j) {
                if (points[i][0] == points[j][0] && points[i][1] == points[j][1]) {
                    same_count += 1;
                } else if (points[i][1] == points[j][1]) {
                    vertical_count += 1;
                } else {
                    int dif1 = points[i][0] - points[j][0];
                    int dif2 = points[i][1] - points[j][1];
                    
                    int common_divider = GCD(dif1, dif2);
                    record[{dif1/common_divider, dif2/common_divider}] += 1;
                    tmp_res = max(tmp_res, record[{dif1/common_divider, dif2/common_divider}]);
                }
            }
            tmp_res = max(tmp_res, vertical_count);
            res = max(res, tmp_res + same_count + 1);
        }
        
        return res;
    }
    
    int GCD(int a, int b) {
        if (b == 0)
            return a;
        return GCD(b, a%b);
    }
};
