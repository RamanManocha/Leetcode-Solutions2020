256. Paint House
Easy

847

84

Add to List

Share
There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. 
             Minimum cost: 2 + 5 + 3 = 10.
             
   NOTE:

dp[i][j] is the min cost for first i houses ended with color j.
We can have below DP formula easily:
dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + matrix[i][0],
dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + matrix[i][1],
dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + matrix[i][2].
class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        int n = costs.size();
        if (!n) return 0;
        if (n == 1) return min(costs[0][0], min(costs[0][1], costs[0][2]));
        
        for (int i = 1; i < n; i++) {
            costs[i][0] += min(costs[i - 1][1], costs[i - 1][2]);
            costs[i][1] += min(costs[i - 1][0], costs[i - 1][2]);
            costs[i][2] += min(costs[i - 1][0], costs[i - 1][1]);
        }
        
        return min(costs[n - 1][0], min(costs[n - 1][1], costs[n - 1][2]));
    }
};          
